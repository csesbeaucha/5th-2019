--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): GoldenBals, Maths
        It has b as -1 and c as 1 and if positive it colludes and negative it be
        trays unless both peoples score is above 500 then it betrays.
Player 1 (P1): ShadowClan, The name the team gives to this strategy
        How does this strategy decide?
Player 2 (P2): Good Game, Operation Massacre
        There are certain conditions where I may collude. There are also certain
         conditions where I may betray. The only thing that I know for sure is t
        hat me=win
Player 3 (P3): The name the team gives to itself, The name the team gives to this strategy
        How does this strategy decide?
Player 4 (P4): , Betray when possible
        if opponent tends to collaborate, we shall betray them.
Player 5 (P5): phumph, Last player's move
        It picks the choice that the opposite player chose in the previous round
Player 6 (P6): 1080Tis, B for a B
        Tit for Tat
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1     P2     P3     P4     P5     P6
vs. P0 :      0     46     50   -249   -250     53   -250
vs. P1 :     50      0     50     50    100     55   -250
vs. P2 :     50     50      0   -236   -204     62   -250
vs. P3 :   -249     45   -236      0   -250   -225   -250
vs. P4 :   -250   -500   -283   -250      0   -252   -250
vs. P5 :    -88    -10    -79   -225   -247      0   -250
vs. P6 :   -250   -250   -250   -250   -250   -250      0
TOTAL  :-736.42-618.47-747.61-1160.39-1101.8-556.99-1500.0
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
GoldenBals(P0):     -105.2 points with Maths                                   
Good Game (P2):     -106.8 points with Operation Massacre                      
          (P4):     -157.4 points with Betray when possible                    
The name t(P3):    -165.77 points with The name the team gives to this strategy
1080Tis   (P6):    -214.29 points with B for a B                               
phumph    (P5):     -79.57 points with Last player's move                      
ShadowClan(P1):     -88.35 points with The name the team gives to this strategy
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team0--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'GoldenBals' # Only 10 chars displayed.
strategy_name = 'Maths'
strategy_description = 'It has b as -1 and c as 1 and if positive it colludes and negative it betrays unless both peoples score is above 500 then it betrays.'
import random 
def move(my_history, their_history, my_score, their_score):
    score=0
    if len(their_history)==0:
        first_move=['b','c']
        choice=random.choice(first_move)
        return choice  
    else:
        for item in their_history:
            if item=='b':
                score+=-1
            else:
                score+=1
    if score>0:
        return 'c'
    elif score<0:
        return 'b'
    elif their_score>500:
        return "b"
    
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
'''def test_move(my_history, their_history, my_score, their_score, result):
    calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')'''             --------------------------------------------------------------------------------
team7--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'ShadowClan' # Only 10 chars displayed.
strategy_name = 'The name the team gives to this strategy'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    return 'c'

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b') 
              
def dilemma_strat(their_score,their_history):
    if their_score>=0:
        if their_history[-1]=='b':
            return 'b'
    else:
        if their_history[-1]=='c':
            return 'b'
    
                  --------------------------------------------------------------------------------
team8--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Good Game' # Only 10 chars displayed.
strategy_name = 'Operation Massacre'
strategy_description = 'There are certain conditions where I may collude. There are also certain conditions where I may betray. The only thing that I know for sure is that me=win'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    import random            
              
    if len(their_history)==0:
        return 'c'
    elif len(their_history)>0:
        for i in range (len(their_history)):
    
            if their_history[i]=='c':
                    return 'c'
            elif random.randint(1,10)>9:
                return 'c'
            else:
                return 'b'
    
    

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             



 
--------------------------------------------------------------------------------
team12--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'The name the team gives to itself' # Only 10 chars displayed.
strategy_name = 'The name the team gives to this strategy'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    
    if their_score >= my_score:
        return 'b'
    else: 
        return'c'
            

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
              --------------------------------------------------------------------------------
team9--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = '' # Only 10 chars displayed.
strategy_name = 'Betray when possible'
strategy_description = 'if opponent tends to collaborate, we shall betray them.'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    count = 0
    if len(their_history) == 0:
        return 'b'
    else:    
        for item in their_history:
            if item == 'c':
                count = count + 1
            else:
                count = count 
        if count >= len(their_history)*0.75 or count <= len(their_history)*0.5:
            return 'b'
        else:
            return 'c'
        

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team10--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'phumph' # Only 10 chars displayed.
strategy_name = "Last player's move"
strategy_description = 'It picks the choice that the opposite player chose in the previous round'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    if len(their_history)==0:
        return 'c'
    elif len(their_history)>=98:
        return 'b'
    else:
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
        return their_history[-1]

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print ('Test passed')
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team4--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = '1080Tis'
strategy_name = 'B for a B'
strategy_description = 'Tit for Tat'
    
def wrongmove():
    return 'c'
    
def goodmove():
    return 'b'
friend = False
final = False
def move(my_history, their_history, my_score, their_score):
    if len(my_history) == 0 or len(my_history) == 1 or len(my_history) == 2 or len(my_history) == 4:
        wrongmove
    elif len(my_history) == 3:
        goodmove
    elif their_history[0] == 'c' and their_history[1] == 'c' and their_history[2] == 'c' and their_history[3] == 'b' and their_history[4] == 'c':
        if len(my_history) > 14:
            for n in range(len(10)):
                if their_history[n+4] == 'b':
                    if their_history[-1] == 'c':
                        wrongmove
                    else: 
                        goodmove
                else:
                    goodmove
        else:
            goodmove
    else:
        if their_history[-1] == 'c':
            wrongmove
        else:
            goodmove
            
            
    
    
    
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''   --------------------------------------------------------------------------------
Section 3 - Game Data for Team GoldenBals
--------------------------------------------------------------------------------
50.33557046979866 pt/round: GoldenBals(P0) "Maths"
46.308724832214764 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
BCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
cCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
50.0 pt/round: GoldenBals(P0) "Maths"
50.0 pt/round: Good Game(P2) "Operation Massacre"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-249.25925925925927 pt/round: GoldenBals(P0) "Maths"
-249.25925925925927 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
cB bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
Bcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: GoldenBals(P0) "Maths"
-250.0 pt/round: (P4) "Betray when possible"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-87.5 pt/round: GoldenBals(P0) "Maths"
53.125 pt/round: phumph(P5) "Last player's move"
Bc cCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
cBc CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCcccccccccccccccccccccccccccccc
CCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

--------------------------------------------------------------------------------
-250.0 pt/round: GoldenBals(P0) "Maths"
-250.0 pt/round: 1080Tis(P6) "B for a B"
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team ShadowClan
--------------------------------------------------------------------------------
46.308724832214764 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
50.33557046979866 pt/round: GoldenBals(P0) "Maths"
cCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
BCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
50.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
50.0 pt/round: Good Game(P2) "Operation Massacre"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
45.21739130434783 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
50.43478260869565 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
cCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
BCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-500.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
100.0 pt/round: (P4) "Betray when possible"
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

ccccccccccccc
BBBBBBBBBBBBB

--------------------------------------------------------------------------------
-10.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
55.45454545454545 pt/round: phumph(P5) "Last player's move"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCcccccccccccc
CCCCCCCCCCCCCCCCCCBBBBBBBBBBBB

--------------------------------------------------------------------------------
-250.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
-250.0 pt/round: 1080Tis(P6) "B for a B"
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                          

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Good Game
--------------------------------------------------------------------------------
50.0 pt/round: Good Game(P2) "Operation Massacre"
50.0 pt/round: GoldenBals(P0) "Maths"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
50.0 pt/round: Good Game(P2) "Operation Massacre"
50.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-236.18421052631578 pt/round: Good Game(P2) "Operation Massacre"
-236.18421052631578 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
cBbcCBbbbbbbbbbcBcBcCBbbbbbbbbbbbbbbcBbbbbbcBbbbbbbcBbbbbcBbbbbbbbbbbbbbbbbbbbbb
BcbBCcbbbbbbbbbBcBcBCcbbbbbbbbbbbbbbBcbbbbbBcbbbbbbBcbbbbBcbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcBbbbbcBbbcBbbbbbbbbbbbbbcBbbbbcBbbbbbbbcB
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbBcbbbbBcbbBcbbbbbbbbbbbbbBcbbbbBcbbbbbbbBc

--------------------------------------------------------------------------------
-282.520325203252 pt/round: Good Game(P2) "Operation Massacre"
-204.47154471544715 pt/round: (P4) "Betray when possible"
cbbbcbbbbbbbbbbbbbbbbbbbbbbcbbbbcbbcbbbbbbbcbcbbcbcbbbbccbbbbbbbbbbbbbbcccbbbbcb
BbbbBbbbbbbbbbbbbbbbbbbbbbbBbbbbBbbBbbbbbbbBbBbbBbBbbbbBBbbbbbbbbbbbbbbBBBbbbbBb

bbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-78.90625 pt/round: Good Game(P2) "Operation Massacre"
61.71875 pt/round: phumph(P5) "Last player's move"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCcccccccccccccccccccccccccccccc
CCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

--------------------------------------------------------------------------------
-250.0 pt/round: Good Game(P2) "Operation Massacre"
-250.0 pt/round: 1080Tis(P6) "B for a B"
cbbbcbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbcbbbbbbbbbbbbbbbbbbbbcbbbbbbbb
                                                                                

bbbbbbbbbbbbbcbbbcbbbbbbbbbb
                            

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team The name the team gives to itself
--------------------------------------------------------------------------------
-249.25925925925927 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
-249.25925925925927 pt/round: GoldenBals(P0) "Maths"
Bcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cB bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
50.43478260869565 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
45.21739130434783 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
BCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
cCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-236.18421052631578 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
-236.18421052631578 pt/round: Good Game(P2) "Operation Massacre"
BcbBCcbbbbbbbbbBcBcBCcbbbbbbbbbbbbbbBcbbbbbBcbbbbbbBcbbbbBcbbbbbbbbbbbbbbbbbbbbb
cBbcCBbbbbbbbbbcBcBcCBbbbbbbbbbbbbbbcBbbbbbcBbbbbbbcBbbbbcBbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbBcbbbbBcbbBcbbbbbbbbbbbbbBcbbbbBcbbbbbbbBc
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcBbbbbcBbbcBbbbbbbbbbbbbbcBbbbbcBbbbbbbbcB

--------------------------------------------------------------------------------
-250.0 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
-250.0 pt/round: (P4) "Betray when possible"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbb
bbb

--------------------------------------------------------------------------------
-225.37688442211055 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
-225.37688442211055 pt/round: phumph(P5) "Last player's move"
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cBcBcBcBcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
-250.0 pt/round: 1080Tis(P6) "B for a B"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                                                                

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                                       

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team 
--------------------------------------------------------------------------------
-250.0 pt/round: (P4) "Betray when possible"
-250.0 pt/round: GoldenBals(P0) "Maths"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
100.0 pt/round: (P4) "Betray when possible"
-500.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

BBBBBBBBBBBBB
ccccccccccccc

--------------------------------------------------------------------------------
-204.47154471544715 pt/round: (P4) "Betray when possible"
-282.520325203252 pt/round: Good Game(P2) "Operation Massacre"
BbbbBbbbbbbbbbbbbbbbbbbbbbbBbbbbBbbBbbbbbbbBbBbbBbBbbbbBBbbbbbbbbbbbbbbBBBbbbbBb
cbbbcbbbbbbbbbbbbbbbbbbbbbbcbbbbcbbcbbbbbbbcbcbbcbcbbbbccbbbbbbbbbbbbbbcccbbbbcb

bbbbbbbbbbBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: (P4) "Betray when possible"
-250.0 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbb
bbb

--------------------------------------------------------------------------------
-247.32824427480915 pt/round: (P4) "Betray when possible"
-251.9083969465649 pt/round: phumph(P5) "Last player's move"
Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: (P4) "Betray when possible"
-250.0 pt/round: 1080Tis(P6) "B for a B"
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                                                                

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                                                                

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                   

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team phumph
--------------------------------------------------------------------------------
53.125 pt/round: phumph(P5) "Last player's move"
-87.5 pt/round: GoldenBals(P0) "Maths"
cBc CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
Bc cCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
CCCCCCCCCCCCCCCCCCcccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
55.45454545454545 pt/round: phumph(P5) "Last player's move"
-10.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCBBBBBBBBBBBB
CCCCCCCCCCCCCCCCCCcccccccccccc

--------------------------------------------------------------------------------
61.71875 pt/round: phumph(P5) "Last player's move"
-78.90625 pt/round: Good Game(P2) "Operation Massacre"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
CCCCCCCCCCCCCCCCCCcccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-225.37688442211055 pt/round: phumph(P5) "Last player's move"
-225.37688442211055 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
BcBcBcBcBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-251.9083969465649 pt/round: phumph(P5) "Last player's move"
-247.32824427480915 pt/round: (P4) "Betray when possible"
cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
Bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: phumph(P5) "Last player's move"
-250.0 pt/round: 1080Tis(P6) "B for a B"
c                                                                               
                                                                                

                  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                                                                

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                      

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team 1080Tis
--------------------------------------------------------------------------------
-250.0 pt/round: 1080Tis(P6) "B for a B"
-250.0 pt/round: GoldenBals(P0) "Maths"
                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-250.0 pt/round: 1080Tis(P6) "B for a B"
-250.0 pt/round: ShadowClan(P1) "The name the team gives to this strategy"
                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                                                                          
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-250.0 pt/round: 1080Tis(P6) "B for a B"
-250.0 pt/round: Good Game(P2) "Operation Massacre"
                                                                                
cbbbcbbbbbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbcbbbbbbbbbbbbbbbbbbbbcbbbbbbbb

                            
bbbbbbbbbbbbbcbbbcbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: 1080Tis(P6) "B for a B"
-250.0 pt/round: The name the team gives to itself(P3) "The name the team gives to this strategy"
                                                                                
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                                                       
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: 1080Tis(P6) "B for a B"
-250.0 pt/round: (P4) "Betray when possible"
                                                                                
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                                                                                
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                                   
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-250.0 pt/round: 1080Tis(P6) "B for a B"
-250.0 pt/round: phumph(P5) "Last player's move"
                                                                                
c                                                                               

                                                                                
                  bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                                      
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
